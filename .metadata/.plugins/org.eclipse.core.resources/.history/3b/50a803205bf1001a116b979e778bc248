package Amazon;
import java.util.*;

class TreeNode {
	int val;
	TreeNode left;
	TreeNode right;
	TreeNode(int val) {
		this.val = val;
	}

	TreeNode(int val, TreeNode left, TreeNode right) {
		this.val = val;
		this.left = left;
		this.right = right;
	}
}

public class Solution {
	TreeNode root = null;
	public int bstDistance(int num, List<Integer> values, int node1, int node2) {
		int distance = -1;
		if (values == null || values.size() == 0) {
			return distance;
		}
		boolean isNodeOnePresent = false;
		boolean isNodeTwoPresent = false;
		root = new TreeNode(values.get(0));
		for (int i = 1; i < values.size(); i++) {
			
			insert(root, values.get(i));
			if(values.get(i) == node1) {
				isNodeOnePresent = true;
			}
			if(values.get(i) == node2) {
				isNodeTwoPresent = true;
			}
		}
		
		if(!isNodeOnePresent || !isNodeTwoPresent) {
			return distance;
		}
		
		TreeNode parentOfTwoNodes = leastCommonAncestor(root, node1, node2);
		int node1Distance  = getDistance(parentOfTwoNodes, node1);
		int node2Distance = getDistance(parentOfTwoNodes, node2);
		distance = node1Distance + node2Distance;
		return distance;
	}
	

	private void insert(TreeNode root, int number) {
		TreeNode tempRoot = root;
		while (tempRoot != null) {
			if (tempRoot.val > number) {
				if (tempRoot.left != null) {
					tempRoot = tempRoot.left;
				} else {
					tempRoot.left = new TreeNode(number);
					return;
				}
			} else {
				if (tempRoot.right != null) {
					tempRoot = tempRoot.right;
				} else {
					tempRoot.right = new TreeNode(number);
					return;
				}
			}
		}
	}
	private TreeNode leastCommonAncestor(TreeNode root, int node1, int node2) {
		while (true) {
			if (root.val > node1 && root.val > node2) {
				root = root.left;
			} else if (root.val < node1 && root.val < node2) {
				root = root.right;
			} else {
				return root;
			}
		}
	}

	private int getDistance(TreeNode src, int dest) {
		if (src.val == dest)
			return 0;
		TreeNode node = src.left;
		if (src.val < dest) {
			node = src.right;
		}
		return 1 + getDistance(node, dest);
	}

	

	
	public static void main(String[] args) {
		int[] arr = new int[] {5,6,3,1,2,4};
		List<Integer> values = new ArrayList<Integer>();
		for(int i: arr) {
			values.add(i);
		}
		int distance = new Solution().bstDistance(6,values, 2, 4);
		System.out.print(distance);
	}

}
