package Amazon;
import java.util.*;

class TreeNode {
	int val;
	TreeNode left;
	TreeNode right;
	TreeNode(int val) {
		this.val = val;
	}

	TreeNode(int val, TreeNode left, TreeNode right) {
		this.val = val;
		this.left = left;
		this.right = right;
	}

	@Override
	public String toString() {
		return "TreeNode [val=" + val + "]";
	}
}

public class Solution {
	TreeNode root = null;
	public int bstDistance(int num, List<Integer> values, int node1, int node2) {
		int distance = -1;
		if (values == null || values.size() == 0) {
			return distance;
		}
		root = new TreeNode(values.get(0));
		for (int i = 1; i < values.size(); i++) {
			insert(root, values.get(i));
		}
		distance = bstDistance(root, node1, node2);
		return distance;
	}

	public int bstDistance(TreeNode root, int node1, int node2) {
		if (root == null)
			return -1;
		TreeNode lca = lca(root, node1, node2);
		return getDistance(lca, node1) + getDistance(lca, node2);
	}

	private int getDistance(TreeNode src, int dest) {
		if (src.val == dest)
			return 0;
		TreeNode node = src.left;
		if (src.val < dest) {
			node = src.right;
		}
		return 1 + getDistance(node, dest);
	}

	private TreeNode lca(TreeNode root, int node1, int node2) {
		while (true) {
			if (root.val > node1 && root.val > node2) {
				root = root.left;
			} else if (root.val < node1 && root.val < node2) {
				root = root.right;
			} else {
				return root;
			}
		}
	}

	public TreeNode bstFromPreorder(int[] preorder) {
		if (preorder == null || preorder.length == 0) {
			return null;
		}
		TreeNode root = new TreeNode(preorder[0]);
		for (int i = 1; i < preorder.length; i++) {
			insert(root, preorder[i]);
		}
		return root;

	}

	public void insert(TreeNode root, int number) {
		TreeNode tempRoot = root;
		while (tempRoot != null) {
			if (tempRoot.val > number) {
				if (tempRoot.left != null) {
					tempRoot = tempRoot.left;
				} else {
					tempRoot.left = new TreeNode(number);
					return;
				}
			} else {
				if (tempRoot.right != null) {
					tempRoot = tempRoot.right;
				} else {
					tempRoot.right = new TreeNode(number);
					return;
				}
			}
		}
	}

}
