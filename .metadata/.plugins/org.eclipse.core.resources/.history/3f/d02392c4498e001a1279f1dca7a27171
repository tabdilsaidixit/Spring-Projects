import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Queue;

class Solution {
    int maximum = Integer.MIN_VALUE;
    HashMap<TreeNode, Integer> hashMap = new HashMap<TreeNode, Integer>();
    public int maxPathSum(TreeNode root) {
        if(root==null){
            return 0;
        }
        hashMap.put(null, 0);
        maxPathSum1(root);
        return maximum;
    }
    public int maxPathSum1(TreeNode root) {
        
        if(hashMap.containsKey(root)){
            return hashMap.get(root);
        }
        else{
            
            int left = maxPathSum(root.left);
            int right = maxPathSum(root.right);
            int val = root.val;
            System.out.println(" - " + left);
            System.out.println(" - " + right);
            System.out.println(" - " + val);
            if(left>0){
                val+=left;
            }
            if(right>0){
                val+=right;
            }
            if(val>maximum){
                maximum = val;
            }
            //root.val = val;
            hashMap.put(root, val);
            System.out.println(" - " + val);
            System.out.println(" ============= " );
            return val;
        }
        
    }
}

public class MainClass {
    public static TreeNode stringToTreeNode(String input) {
        input = input.trim();
        input = input.substring(1, input.length() - 1);
        if (input.length() == 0) {
            return null;
        }
    
        String[] parts = input.split(",");
        String item = parts[0];
        TreeNode root = new TreeNode(Integer.parseInt(item));
        Queue<TreeNode> nodeQueue = new LinkedList<>();
        nodeQueue.add(root);
    
        int index = 1;
        while(!nodeQueue.isEmpty()) {
            TreeNode node = nodeQueue.remove();
    
            if (index == parts.length) {
                break;
            }
    
            item = parts[index++];
            item = item.trim();
            if (!item.equals("null")) {
                int leftNumber = Integer.parseInt(item);
                node.left = new TreeNode(leftNumber);
                nodeQueue.add(node.left);
            }
    
            if (index == parts.length) {
                break;
            }
    
            item = parts[index++];
            item = item.trim();
            if (!item.equals("null")) {
                int rightNumber = Integer.parseInt(item);
                node.right = new TreeNode(rightNumber);
                nodeQueue.add(node.right);
            }
        }
        return root;
    }
    
    public static void main(String[] args) throws IOException {
        //BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String line = "[1,2,3,4,5,6,7,8]";
        if ((line) != null) {
            TreeNode root = stringToTreeNode(line);
            
            int ret = new Solution().maxPathSum(root);
            
            String out = String.valueOf(ret);
            
            System.out.print("out"+ out);
        }
    }
}